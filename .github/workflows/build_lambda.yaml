name: Smart Deploy to AWS Lambda (ETL)

on:
  push:
    branches: [ main ]
    paths:
      - 'lambda-base/**'
      - 'extract_data_pdf/**'
      - 'transform_data_pdf/**'
      - 'extract_data_mp/**'
      - 'transform_data_mp/**'
      - 'load_data/**'
      - 'webhook_mp_report/**'
      - 'compensation_flow/**'
      - 'extract_data_bank_pay/**'
      - 'transform_data_bank_pay/**'
      - 'redshift_to_bq/**'
      - 'ai_agent/**'
      - 'infrastructure/**'
      - '.github/workflows/build_lambda.yaml'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/etl-expenses"

jobs:
  check-ecr-state:
    runs-on: ubuntu-latest
    outputs:
      ecr_empty: ${{ steps.check-ecr.outputs.empty }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Check if ECR repository is empty
        id: check-ecr
        run: |
          if aws ecr describe-images --repository-name etl-expenses --query 'imageDetails' --output text 2>/dev/null | grep -q .; then
            echo "empty=false" >> $GITHUB_OUTPUT
            echo "ECR repository has images"
          else
            echo "empty=true" >> $GITHUB_OUTPUT
            echo "ECR repository is empty - will force initial push"
          fi

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      lambda_base_changed: ${{ steps.check-lambda-base.outputs.changed }}
      images_changed: ${{ steps.check-images.outputs.changed }}
      infra_changed: ${{ steps.check-infra.outputs.changed }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check Lambda Base changes
        id: check-lambda-base
        run: |
          if git diff --quiet HEAD^ HEAD -- lambda-base/; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Check Lambda Images changes
        id: check-images
        run: |
          CHANGED=false
          for dir in extract_data_pdf transform_data_pdf extract_data_mp transform_data_mp load_data webhook_mp_report compensation_flow extract_data_bank_pay transform_data_bank_pay redshift_to_bq ai_agent; do
            if ! git diff --quiet HEAD^ HEAD -- "$dir/"; then
              CHANGED=true
              break
            fi
          done
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
      
      - name: Check Infrastructure changes
        id: check-infra
        run: |
          if git diff --quiet HEAD^ HEAD -- infrastructure/; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  build-lambda-base:
    needs: [detect-changes, check-ecr-state]
    if: needs.detect-changes.outputs.lambda_base_changed == 'true' || needs.check-ecr-state.outputs.ecr_empty == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build lambda-base image
        run: |
          docker build -t lambda-base -f lambda-base/dependencies.dockerfile .
          docker tag lambda-base ${{ env.ECR_REPO }}:lambda-base
          docker push ${{ env.ECR_REPO }}:lambda-base
          echo "Successfully built and pushed lambda-base image"

  build-lambda-images:
    needs: [detect-changes, build-lambda-base, check-ecr-state]
    if: needs.detect-changes.outputs.images_changed == 'true' || needs.check-ecr-state.outputs.ecr_empty == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [
          "pdf_extractor-latest|extract_data_pdf/extract_data_pdf.dockerfile",
          "pdf_processor-latest|transform_data_pdf/transform_data_pdf.dockerfile",
          "mp_report_extractor-latest|extract_data_mp/extract_data_mp.dockerfile",
          "mp_report_processor-latest|transform_data_mp/transform_data_mp.dockerfile",
          "load_report_and_pdf-latest|load_data/load_data.dockerfile",
          "webhook_mp_report-latest|webhook_mp_report/webhook_mp_report.dockerfile",
          "compensation_flow-latest|compensation_flow/compensation_flow.dockerfile",
          "bank_payments_extractor-latest|extract_data_bank_pay/extract_data_bank_pay.dockerfile",
          "bank_payments_processor-latest|transform_data_bank_pay/transform_data_bank_pay.dockerfile",
          "redshift_to_bq-latest|redshift_to_bq/redshift_to_bq.dockerfile",
          "ai_agent-latest|ai_agent/ai_agent.dockerfile"
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Extract tag and dockerfile
        id: extract
        run: |
          IFS='|' read -r IMAGE_TAG DOCKERFILE <<< "${{ matrix.image }}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "DOCKERFILE=$DOCKERFILE" >> $GITHUB_ENV

      - name: Build and push (initial or changed)
        run: |
          echo "Building image $IMAGE_TAG"
          echo "Reason: ECR empty? ${{ needs.check-ecr-state.outputs.ecr_empty == 'true' }}"
          echo "Directory changed? ${{ needs.detect-changes.outputs.images_changed == 'true' }}"
          
          docker build \
            --build-arg aws_account_id=${{ env.AWS_ACCOUNT_ID }} \
            --build-arg github_secret=${{ secrets.GITHUB_API_SECRET }} \
            --build-arg TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
            -t local-build:$IMAGE_TAG \
            -f $DOCKERFILE .
          
          docker tag local-build:$IMAGE_TAG ${{ env.ECR_REPO }}:$IMAGE_TAG
          docker push ${{ env.ECR_REPO }}:$IMAGE_TAG
          echo "Successfully pushed ${{ env.ECR_REPO }}:$IMAGE_TAG"

  terraform-deploy:
    needs: [detect-changes, build-lambda-images, check-ecr-state]
    if: needs.detect-changes.outputs.infra_changed == 'true' || needs.check-ecr-state.outputs.ecr_empty == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        run: terraform init

      - name: Import Resources (if exist)
        run: |
          # Lista de comandos de import...
          # (Mantén tus imports actuales aquí)
          echo "Importing existing resources..."

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_email: ${{ secrets.EMAIL }}
          TF_VAR_TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Configure Telegram Webhook
        run: |
          # (Mantén tu configuración actual del webhook)
          echo "Configuring Telegram webhook..."

  monitor-ecr:
    needs: build-lambda-images
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Check ECR Repository Size
        run: |
          SIZE_BYTES=$(aws ecr describe-repositories --repository-names etl-expenses --query "repositories[0].repositorySize" --output text)
          SIZE_GB=$(echo "$SIZE_BYTES / 1073741824" | bc -l | awk '{printf "%.2f", $1}')
          echo "Current ECR size: $SIZE_GB GB"
          
          LIMIT_GB=10
          if (( $(echo "$SIZE_GB > $LIMIT_GB" | bc -l) )); then
            echo "::error::ECR repository exceeds size limit of $LIMIT_GB GB"
            exit 1
          fi
