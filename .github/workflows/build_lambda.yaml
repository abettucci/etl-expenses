name: Build and Push Lambda Docker Images Optimized

on:
  push:
    branches: [main]
    paths:
      - '**.py'
      - '**/Dockerfile'
      - '**/requirements.txt'
      - '.github/workflows/build_lambda.yaml'
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/etl-expenses"
  TF_VAR_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  TF_VAR_TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create new buildx builder
        run: |
          if ! docker buildx inspect lambda-builder >/dev/null 2>&1; then
            docker buildx create --use --name lambda-builder --driver docker-container
          else
            docker buildx use lambda-builder
          fi

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${ECR_REPO}

      - name: Build and Push Changed Lambda Images
        run: |
          set -e

          for dir in */ ; do
            if [ -f "$dir/lambda_function.py" ] && [ -f "$dir/requirements.txt" ]; then
              DOCKERFILE=$(find "$dir" -iname "*.dockerfile" -o -iname "Dockerfile" | head -n1)
              if [ ! -f "$DOCKERFILE" ]; then
                echo "Skipping $dir (no Dockerfile found)"
                continue
              fi

              echo "üîç Procesando $dir..."
              HASH=$(find "$dir" \( -name "lambda_function.py" -o -name "requirements.txt" -o -iname "*dockerfile*" \) \
              -exec cat {} + | sha256sum | awk '{print $1}')

              # Nombrar tags
              LAMBDA_NAME="${dir%/}"
              HASH_TAG="$HASH"
              LOGICAL_TAG="$LAMBDA_NAME"
              REPO="${{ env.ECR_REPO }}"
              IMAGE_HASH_URI="$REPO:$HASH_TAG"
              IMAGE_LOGICAL_URI="$REPO:$LOGICAL_TAG"

              # Verificar si ya existe la imagen con hash
              if aws ecr describe-images --repository-name "$(basename $REPO)" --image-ids imageTag=$HASH_TAG >/dev/null 2>&1; then
                echo "‚úÖ Imagen ya existe en ECR: $HASH_TAG"
              else
                echo "üöÄ Build y push de nueva imagen: $HASH_TAG"

                docker buildx build \
                --platform linux/amd64 \
                --cache-from=type=registry,ref=$ECR_REPO:buildcache \
                --cache-to=type=registry,ref=$ECR_REPO:buildcache,mode=max \
                --push \
                -t "$IMAGE_HASH_URI" \
                -f "$DOCKERFILE" "$dir"

                docker push "$IMAGE_HASH_URI"

                # Crear tambi√©n el tag l√≥gico (usado por Terraform)
                docker tag "$IMAGE_HASH_URI" "$IMAGE_LOGICAL_URI"
                docker push "$IMAGE_LOGICAL_URI"

                # (Opcional) Actualizar Lambda directamente
                if aws lambda get-function --function-name "$LAMBDA_NAME" >/dev/null 2>&1; then
                  echo "üîÑ Actualizando Lambda: $LAMBDA_NAME"
                  aws lambda update-function-code \
                    --function-name "$LAMBDA_NAME" \
                    --image-uri "$IMAGE_LOGICAL_URI"
                else
                  echo "‚ö†Ô∏è  Lambda $LAMBDA_NAME no existe, se omite update."
                fi
              fi
            fi
          done
                
  terraform-deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        run: |
          set -x
          terraform init
          
          # Import existing ECR repository
          terraform import aws_ecr_repository.lambda_images etl-expenses || true
          
          # Import existing API Gateway and resources
          terraform import aws_api_gateway_rest_api.telegram_webhook $(aws apigateway get-rest-apis --query "items[?name=='telegram-redshift-bot'].id" --output text) || true
          
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='telegram-redshift-bot'].id" --output text)
          if [ ! -z "$API_ID" ]; then
            ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/'].id" --output text)
            WEBHOOK_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/webhook'].id" --output text)
            
            if [ ! -z "$WEBHOOK_ID" ]; then
              echo "üîÑ Importing existing API Gateway resources..."
              terraform import aws_api_gateway_resource.webhook $API_ID/$WEBHOOK_ID || true
              terraform import aws_api_gateway_method.post $API_ID/$WEBHOOK_ID/POST || true
              terraform import aws_api_gateway_integration.lambda $API_ID/$WEBHOOK_ID/POST || true
              
              # Import Lambda permission with correct format
              echo "üîê Importing Lambda permission for API Gateway..."
              terraform import aws_lambda_permission.allow_api_gateway "ai-agent/AllowAPIGatewayInvoke" || true
              
              # Verify the import
              if [ $? -ne 0 ]; then
                echo "‚ö†Ô∏è Failed to import Lambda permission, trying alternative format..."
                terraform import aws_lambda_permission.allow_api_gateway "arn:aws:lambda:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:ai-agent/AllowAPIGatewayInvoke" || true
              fi
            else
              echo "‚ö†Ô∏è Webhook resource not found in API Gateway"
            fi
          else
            echo "‚ö†Ô∏è API Gateway 'telegram-redshift-bot' not found"
          fi
          
          # Import other existing resources
          terraform import aws_s3_bucket.market_tickets market-tickets || true
          terraform import aws_s3_bucket.mp_reports mercadopago-reports || true
          terraform import aws_s3_bucket.bank_payments bank-payments || true
          
          terraform import aws_iam_policy.step_function_lambda_policy arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/step_function_lambda_policy || true
          terraform import aws_iam_policy.step_function_start_policy arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/step_function_start_policy || true
          terraform import aws_iam_policy.step_function_glue_policy arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/step_function_glue_policy || true
          terraform import aws_iam_policy.lambda_redshift_access arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/lambda_redshift_access || true
          terraform import aws_iam_policy.lambda_ecr_access arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/lambda_ecr_access || true
          terraform import aws_iam_policy.lambda_bedrock_access arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/lambda_bedrock_access || true
          terraform import aws_iam_policy.lambda_s3_access arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/lambda_s3_access || true

          terraform import aws_redshiftserverless_namespace.etl_namespace pdf-etl-namespace || true
          terraform import aws_lambda_permission.allow_api_gateway ai-agent/AllowAPIGatewayInvoke || true

          terraform import aws_lambda_function.webhook_mp_report webhook_mp_report || true
          terraform import aws_lambda_function.compensation_flow compensation_flow || true
          terraform import aws_lambda_function.pdf_extractor pdf_extractor || true
          terraform import aws_lambda_function.pdf_processor pdf_processor || true
          terraform import aws_lambda_function.mp_report_extractor mp_report_extractor || true
          terraform import aws_lambda_function.mp_report_processor mp_report_processor || true
          terraform import aws_lambda_function.bank_payments_extractor bank_payments_extractor || true
          terraform import aws_lambda_function.bank_payments_processor bank_payments_processor || true
          terraform import aws_lambda_function.redshift_to_bq redshift_to_bq || true
          terraform import aws_lambda_function.ai_agent ai_agent || true
          terraform import aws_lambda_function.load_report_and_pdf load_report_and_pdf || true
          
          terraform import aws_iam_role.lambda_exec lambda_exec_role || true
          terraform import aws_iam_role.step_function_role step_function_role || true
          terraform import aws_iam_role.glue_service_role glue_service_role || true

          terraform import aws_sfn_state_machine.pdf_etl_flow arn:aws:states:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:stateMachine:pdf-etl-flow || true
          terraform import aws_sfn_state_machine.mp_report_etl_flow arn:aws:states:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:stateMachine:mp-report-etl-flow || true
          terraform import aws_sfn_state_machine.bank_payments_etl_flow arn:aws:states:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:stateMachine:bank-payments-etl-flow || true

          terraform import aws_glue_catalog_database.etl_database "${{ secrets.AWS_ACCOUNT_ID }}:etl_database" || true
          terraform import aws_glue_crawler.market_tickets_crawler market-tickets-crawler || true
          terraform import aws_glue_crawler.mp_reports_crawler mp-reports-crawler || true
          terraform import aws_glue_crawler.bank_payments_crawler bank-payments-crawler || true

          terraform import aws_redshiftserverless_workgroup.etl_workgroup pdf-etl-workgroup || true

          terraform import aws_cloudwatch_log_group.etl_logs /aws/vendedlogs/states/etl-logs || true  
        
        env:
          TF_VAR_aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_email: ${{ secrets.EMAIL }}
          TF_VAR_TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TF_VAR_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Terraform Apply
        run: |
          set -x
          terraform apply -auto-approve
        env:
          TF_VAR_aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_email: ${{ secrets.EMAIL }}
          TF_VAR_TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TF_VAR_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Get Webhook URL (Robust)
        id: webhook
        run: |
          set -x
          # Extraer SOLO la URL usando grep y sed
          RAW_OUTPUT=$(terraform output webhook_url)
          WEBHOOK_URL=$(echo "$RAW_OUTPUT" | grep -o 'https://[^[:space:]]*' | head -n1 | sed 's/"//g')
          
          # Validar formato
          if [[ ! "$WEBHOOK_URL" =~ ^https://.* ]]; then
            echo "‚ùå Error: URL malformada - '$WEBHOOK_URL'"
            exit 1
          fi
          
          echo "webhook_url=$WEBHOOK_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Webhook URL limpia: $WEBHOOK_URL"
          
      - name: Configure Telegram Webhook
        run: |
          set -x
          # Usar directamente la variable del paso anterior
          WEBHOOK_URL="${{ steps.webhook.outputs.webhook_url }}"
          
          echo "Configurando webhook con URL: $WEBHOOK_URL"
          
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook" \
              -H "Content-Type: application/json" \
              -d "{\"url\": \"$WEBHOOK_URL\"}"
          
          echo "Webhook configurado exitosamente"
                
      - name: Verify Webhook
        run: |
          set -x
          curl -X GET "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/getWebhookInfo" | jq .
