name: Build and Push Lambda Docker Images Optimized

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/etl-expenses"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get list of Lambda directories
        id: list_dirs
        run: |
          dirs=$(find . -type f -name 'lambda_function.py' -exec dirname {} \;)
          echo "lambda_dirs<<EOF" >> $GITHUB_OUTPUT
          echo "$dirs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and Push changed Lambda images
        run: |
          echo "${{ steps.list_dirs.outputs.lambda_dirs }}" | while read dir; do
            # Only proceed if all required files exist
            if [[ -f "$dir/lambda_function.py" && -f "$dir/requirements.txt" && $(ls $dir/*.dockerfile 2>/dev/null | wc -l) -gt 0 ]]; then
              DOCKERFILE=$(ls $dir/*.dockerfile | head -n1)
              # Calculate hash based on Dockerfile, function and requirements
              HASH=$(cat $DOCKERFILE $dir/lambda_function.py $dir/requirements.txt | sha256sum | cut -c1-12)
              IMAGE_TAG=$(basename $dir)-$HASH
              IMAGE_NAME=${{ env.ECR_REPO }}:$IMAGE_TAG

              # Check if image already exists in ECR
              if aws ecr describe-images --repository-name etl-expenses --image-ids imageTag=$IMAGE_TAG >/dev/null 2>&1; then
                echo "🔄 Image $IMAGE_NAME already exists in ECR, skipping build and push."
              else
                echo "🚀 Building and pushing $IMAGE_NAME"
                docker build -t $IMAGE_NAME -f $DOCKERFILE .
                aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
                docker push $IMAGE_NAME
              fi
            else
              echo "⚠️ Skipping $dir because required files are missing"
            fi
          done
          
  terraform-deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_email: ${{ secrets.EMAIL }}
          TF_VAR_TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Get Webhook URL (Robust)
        id: webhook
        run: |
          OUTPUT=$(terraform output webhook_url)
          WEBHOOK_URL=$(echo "$OUTPUT" | sed 's/"//g' | tr -d '\n' | sed 's/.*https/https/')
          echo "webhook_url=$WEBHOOK_URL" >> $GITHUB_OUTPUT
          echo "Webhook URL: $WEBHOOK_URL"
          
      - name: Configure Telegram Webhook
        run: |
          OUTPUT=$(terraform output webhook_url)
          WEBHOOK_URL=$(echo "$OUTPUT" | sed 's/"//g' | tr -d '\n' | sed 's/.*https/https/')
          echo "Configurando webhook con URL: $WEBHOOK_URL"
          
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook" \
               -H "Content-Type: application/json" \
               -d "{\"url\": \"$WEBHOOK_URL\"}"
             
          echo "Webhook configurado exitosamente"
          
      - name: Verify Webhook
        run: |
          curl -X GET "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/getWebhookInfo" | jq .
